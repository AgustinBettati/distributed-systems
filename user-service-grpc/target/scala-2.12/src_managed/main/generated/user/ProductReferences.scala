// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package generated.user

@SerialVersionUID(0L)
final case class ProductReferences(
    id: _root_.scala.collection.Seq[_root_.scala.Int] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[ProductReferences] with scalapb.lenses.Updatable[ProductReferences] {
    private[this] def idSerializedSize = {
      if (__idSerializedSizeField == 0) __idSerializedSizeField = {
        var __s: _root_.scala.Int = 0
        id.foreach(__i => __s += _root_.com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(__i))
        __s
      }
      __idSerializedSizeField
    }
    @transient private[this] var __idSerializedSizeField: _root_.scala.Int = 0
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      if(id.nonEmpty) {
        val __localsize = idSerializedSize
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__localsize) + __localsize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      if (id.nonEmpty) {
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(idSerializedSize)
        id.foreach(_output__.writeInt32NoTag)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): generated.user.ProductReferences = {
      val __id = (_root_.scala.collection.immutable.Vector.newBuilder[_root_.scala.Int] ++= this.id)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 8 =>
            __id += _input__.readInt32()
          case 10 => {
            val length = _input__.readRawVarint32()
            val oldLimit = _input__.pushLimit(length)
            while (_input__.getBytesUntilLimit > 0) {
              __id += _input__.readInt32
            }
            _input__.popLimit(oldLimit)
          }
          case tag => _input__.skipField(tag)
        }
      }
      generated.user.ProductReferences(
          id = __id.result()
      )
    }
    def clearId = copy(id = _root_.scala.collection.Seq.empty)
    def addId(__vs: _root_.scala.Int*): ProductReferences = addAllId(__vs)
    def addAllId(__vs: TraversableOnce[_root_.scala.Int]): ProductReferences = copy(id = id ++ __vs)
    def withId(__v: _root_.scala.collection.Seq[_root_.scala.Int]): ProductReferences = copy(id = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => id
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(id.map(_root_.scalapb.descriptors.PInt)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = generated.user.ProductReferences
}

object ProductReferences extends scalapb.GeneratedMessageCompanion[generated.user.ProductReferences] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[generated.user.ProductReferences] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): generated.user.ProductReferences = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    generated.user.ProductReferences(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[_root_.scala.Int]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[generated.user.ProductReferences] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      generated.user.ProductReferences(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[_root_.scala.Int]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(5)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(5)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = throw new MatchError(__number)
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = generated.user.ProductReferences(
  )
  implicit class ProductReferencesLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, generated.user.ProductReferences]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, generated.user.ProductReferences](_l) {
    def id: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[_root_.scala.Int]] = field(_.id)((c_, f_) => c_.copy(id = f_))
  }
  final val ID_FIELD_NUMBER = 1
}
