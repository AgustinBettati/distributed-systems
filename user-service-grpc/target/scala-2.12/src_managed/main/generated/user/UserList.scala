// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!
//
// Protofile syntax: PROTO3

package generated.user

@SerialVersionUID(0L)
final case class UserList(
    users: _root_.scala.collection.Seq[generated.user.User] = _root_.scala.collection.Seq.empty
    ) extends scalapb.GeneratedMessage with scalapb.Message[UserList] with scalapb.lenses.Updatable[UserList] {
    @transient
    private[this] var __serializedSizeCachedValue: _root_.scala.Int = 0
    private[this] def __computeSerializedValue(): _root_.scala.Int = {
      var __size = 0
      users.foreach { __item =>
        val __value = __item
        __size += 1 + _root_.com.google.protobuf.CodedOutputStream.computeUInt32SizeNoTag(__value.serializedSize) + __value.serializedSize
      }
      __size
    }
    final override def serializedSize: _root_.scala.Int = {
      var read = __serializedSizeCachedValue
      if (read == 0) {
        read = __computeSerializedValue()
        __serializedSizeCachedValue = read
      }
      read
    }
    def writeTo(`_output__`: _root_.com.google.protobuf.CodedOutputStream): _root_.scala.Unit = {
      users.foreach { __v =>
        val __m = __v
        _output__.writeTag(1, 2)
        _output__.writeUInt32NoTag(__m.serializedSize)
        __m.writeTo(_output__)
      };
    }
    def mergeFrom(`_input__`: _root_.com.google.protobuf.CodedInputStream): generated.user.UserList = {
      val __users = (_root_.scala.collection.immutable.Vector.newBuilder[generated.user.User] ++= this.users)
      var _done__ = false
      while (!_done__) {
        val _tag__ = _input__.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __users += _root_.scalapb.LiteParser.readMessage(_input__, generated.user.User.defaultInstance)
          case tag => _input__.skipField(tag)
        }
      }
      generated.user.UserList(
          users = __users.result()
      )
    }
    def clearUsers = copy(users = _root_.scala.collection.Seq.empty)
    def addUsers(__vs: generated.user.User*): UserList = addAllUsers(__vs)
    def addAllUsers(__vs: TraversableOnce[generated.user.User]): UserList = copy(users = users ++ __vs)
    def withUsers(__v: _root_.scala.collection.Seq[generated.user.User]): UserList = copy(users = __v)
    def getFieldByNumber(__fieldNumber: _root_.scala.Int): _root_.scala.Any = {
      (__fieldNumber: @_root_.scala.unchecked) match {
        case 1 => users
      }
    }
    def getField(__field: _root_.scalapb.descriptors.FieldDescriptor): _root_.scalapb.descriptors.PValue = {
      _root_.scala.Predef.require(__field.containingMessage eq companion.scalaDescriptor)
      (__field.number: @_root_.scala.unchecked) match {
        case 1 => _root_.scalapb.descriptors.PRepeated(users.map(_.toPMessage)(_root_.scala.collection.breakOut))
      }
    }
    def toProtoString: _root_.scala.Predef.String = _root_.scalapb.TextFormat.printToUnicodeString(this)
    def companion = generated.user.UserList
}

object UserList extends scalapb.GeneratedMessageCompanion[generated.user.UserList] {
  implicit def messageCompanion: scalapb.GeneratedMessageCompanion[generated.user.UserList] = this
  def fromFieldsMap(__fieldsMap: scala.collection.immutable.Map[_root_.com.google.protobuf.Descriptors.FieldDescriptor, _root_.scala.Any]): generated.user.UserList = {
    _root_.scala.Predef.require(__fieldsMap.keys.forall(_.getContainingType() == javaDescriptor), "FieldDescriptor does not match message type.")
    val __fields = javaDescriptor.getFields
    generated.user.UserList(
      __fieldsMap.getOrElse(__fields.get(0), Nil).asInstanceOf[_root_.scala.collection.Seq[generated.user.User]]
    )
  }
  implicit def messageReads: _root_.scalapb.descriptors.Reads[generated.user.UserList] = _root_.scalapb.descriptors.Reads{
    case _root_.scalapb.descriptors.PMessage(__fieldsMap) =>
      _root_.scala.Predef.require(__fieldsMap.keys.forall(_.containingMessage == scalaDescriptor), "FieldDescriptor does not match message type.")
      generated.user.UserList(
        __fieldsMap.get(scalaDescriptor.findFieldByNumber(1).get).map(_.as[_root_.scala.collection.Seq[generated.user.User]]).getOrElse(_root_.scala.collection.Seq.empty)
      )
    case _ => throw new RuntimeException("Expected PMessage")
  }
  def javaDescriptor: _root_.com.google.protobuf.Descriptors.Descriptor = UserProto.javaDescriptor.getMessageTypes.get(1)
  def scalaDescriptor: _root_.scalapb.descriptors.Descriptor = UserProto.scalaDescriptor.messages(1)
  def messageCompanionForFieldNumber(__number: _root_.scala.Int): _root_.scalapb.GeneratedMessageCompanion[_] = {
    var __out: _root_.scalapb.GeneratedMessageCompanion[_] = null
    (__number: @_root_.scala.unchecked) match {
      case 1 => __out = generated.user.User
    }
    __out
  }
  lazy val nestedMessagesCompanions: Seq[_root_.scalapb.GeneratedMessageCompanion[_]] = Seq.empty
  def enumCompanionForFieldNumber(__fieldNumber: _root_.scala.Int): _root_.scalapb.GeneratedEnumCompanion[_] = throw new MatchError(__fieldNumber)
  lazy val defaultInstance = generated.user.UserList(
  )
  implicit class UserListLens[UpperPB](_l: _root_.scalapb.lenses.Lens[UpperPB, generated.user.UserList]) extends _root_.scalapb.lenses.ObjectLens[UpperPB, generated.user.UserList](_l) {
    def users: _root_.scalapb.lenses.Lens[UpperPB, _root_.scala.collection.Seq[generated.user.User]] = field(_.users)((c_, f_) => c_.copy(users = f_))
  }
  final val USERS_FIELD_NUMBER = 1
}
